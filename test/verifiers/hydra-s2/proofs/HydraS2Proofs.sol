// SPDX-License-Identifier: Unlicense
pragma solidity ^0.8.17;

import "src/libs/utils/Struct.sol";

contract HydraS2Proofs {
    function getEdDSAPubKey() public pure returns (uint256[2] memory) {
        return [
            0x7f6c5612eb579788478789deccb06cf0eb168e457eea490af754922939ebdb9,
            0x20706798455f90ed993f8dac8075fc1538738a25f0c928da905c0dffd81869fa
        ];
    }

    function getRoot() public pure returns (uint256) {
        return 0x1d4a72bd1c1e4f9ab68c3c4c55afd3e582685a18b9ec09fc96136619d2513fe8;
    }

    function getZkConnectResponse1() public pure returns (ZkConnectResponse memory) {
        Statement memory statement = Statement({
            groupId: 0xe9ed316946d3d98dfcd829a53ec9822e,
            value: 1,
            groupTimestamp: bytes16("latest"),
            comparator: StatementComparator.GTE,
            extraData: ""
        });

        ZkConnectProof[] memory proofs = new ZkConnectProof[](1);
        proofs[0] = ZkConnectProof({
            statement: statement,
            provingScheme: bytes32("hydra-s2.1"),
            proofData: hex"162fba0e2b357e6190d05471c08a4f4da6d0831bcefd8f7787d732d3156698d4119664dd2bfcc0d9b0d3513947fa1e20f9f73847c89ddc9f336476eea1106d03070eca2658f85ee8f9845aac26de7ad4ffccc78713f7dd2efb9024e0ef8750090c1f8c411c43ab85f6fe6cfbe53d1c5c3e90e322027bc12975fd96f02566cf1e12f139fd40095f34f8e0603cbe43efc2f03f32c638a94f8fb5f55f2252f48f0112bcbedd222aa50a515826acf4bda6fe381fa651f5b719c0510b81316bd4d1e02c65015a5fa1ae041d5682b490abdc864970b1c3178adbbd7d024ebbc9b06bae3002d7663bc44ebb4ac8567f0e6968dab8e4f479ffb45dc939d4b624392ee1e40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007f6c5612eb579788478789deccb06cf0eb168e457eea490af754922939ebdb920706798455f90ed993f8dac8075fc1538738a25f0c928da905c0dffd81869fa1d4a72bd1c1e4f9ab68c3c4c55afd3e582685a18b9ec09fc96136619d2513fe821a63725868405196971cad8f2e46ed111118a9869929d0f87c154c9c60d015f044f025508bb2ec3ad43852788f4f9f74c37ece5e1958c59b4558e7b098768510000000000000000000000000000000000000000000000000000000000000001285bf79dc20d58e71b9712cb38c420b9cb91d3438c8e3dbaf07829b03ffffffc000000000000000000000000000000000000000000000000000000000000000028c8b31cfdb3021f44a90006d40ee6ff1d1080103a6704b0ba79f0493281599f00000000000000000000000000000000112a692a2005259c25f609416100796700000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000",
            extraData: ""
        });

        return ZkConnectResponse({
            appId: 0x112a692a2005259c25f6094161007967,
            namespace: bytes16(keccak256('main')),
            version: bytes32("zk-connect-v1"),
            proofs: proofs,
            signedMessage: hex"00"
        });
    }

    // function getZkConnectReponseAsBytes() public pure returns (bytes memory) {

    // }
}

// zkConnectResponse={"appId":"0x112a692a2005259c25f6094161007967","namespace":"main","verifiableStatements":[{"groupId":"0xe9ed316946d3d98dfcd829a53ec9822e","value":1,"groupTimestamp":"latest","comparator":"GTE","extraData":null,"provingScheme":"hydra-s2.1","proof":{"input":["0","0","3602196582082511412345093208859330584743530098298494929484637038525722574265","14672613011011178056703002414016466661118036128791343632962870104486584019450","13248611189182993289112986308655530576602761144405261658918024840764458090472","15220001223734259708794025134837761980974298402159981363142196430800432202079","1948848408458219023298847550719312852455121665580000720459610747046315124817","1","18255006010720847855577282464024487725515892822905365243907163690393434849276","0","18447119550478564123220367642251321196495840786123843857934163943441788131743","22817085386902984175628135281532631399","1","0"],"a":["10035208587686635556432700232565779213829501560906643905611872199504837384404","7955041623047583975884660376488022261665017004404505739027848139658497125635"],"b":[["3192320985599442608805658710818450419896966508522449925474882449599111843849","5483494441868992613789901777797721498574736345872569442909238967251826560798"],["8567841644262501509064722169755087348602825209973739811877521117142976859905","8475115816229395816218196553721703309009339733441942703480757801692723204576"]],"c":["20080226229419063639828128333248745521194951849941176435659177649360201608110","21716037057799644879731036919229017249963592340354501423639650460705156424164"]}}],"version":"zk-connect-v1"}

//     this.input = ["0","0","3602196582082511412345093208859330584743530098298494929484637038525722574265","14672613011011178056703002414016466661118036128791343632962870104486584019450","13248611189182993289112986308655530576602761144405261658918024840764458090472","15220001223734259708794025134837761980974298402159981363142196430800432202079","1948848408458219023298847550719312852455121665580000720459610747046315124817","1","18255006010720847855577282464024487725515892822905365243907163690393434849276","0","18447119550478564123220367642251321196495840786123843857934163943441788131743","22817085386902984175628135281532631399","1","0"].map(x=>BigNumber.from(x));
