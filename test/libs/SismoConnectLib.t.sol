// SPDX-License-Identifier: Unlicense
pragma solidity ^0.8.17;

import "forge-std/console.sol";
import {HydraS2BaseTest} from "../verifiers/hydra-s2/HydraS2BaseTest.t.sol";
import {SismoConnect, RequestBuilder} from "src/libs/zk-connect/SismoConnectLib.sol";
import {ZKDropERC721} from "src/ZKDropERC721.sol";
import "src/libs/utils/Structs.sol";
import {SismoConnectHarness} from "test/harness/SismoConnectHarness.sol";
import {BaseDeploymentConfig} from "script/BaseConfig.sol";

contract SismoConnectLibTest is HydraS2BaseTest {
  SismoConnectHarness sismoConnect;
  address user = 0x7def1d6D28D6bDa49E69fa89aD75d160BEcBa3AE;
  bytes16 immutable appId = 0x11b1de449c6c4adb0b5775b3868b28b3;
  ClaimRequest claimRequest;
  AuthRequest authRequest;
  SignatureRequest signature;

  bytes16 immutable APP_ID_ZK_DROP = 0x11b1de449c6c4adb0b5775b3868b28b3;
  bytes16 immutable ZK = 0xe9ed316946d3d98dfcd829a53ec9822e;
  ZKDropERC721 zkdrop;

  function setUp() public virtual override {
    super.setUp();
    sismoConnect = new SismoConnectHarness(appId);
    claimRequest = sismoConnect.exposed_buildClaim({groupId: 0xe9ed316946d3d98dfcd829a53ec9822e});
    authRequest = sismoConnect.exposed_buildAuth({authType: AuthType.VAULT});
    signature = sismoConnect.exposed_buildSignature({message: abi.encode(user)});

    zkdrop =
        new ZKDropERC721({appId: APP_ID_ZK_DROP, groupId: ZK, name: "ZKDrop test", symbol: "test", baseTokenURI: "https://test.com"});
        console.log("ZkDrop contract deployed at", address(zkdrop));
  }

  // Tests that should revert

  function test_RevertWith_EmptyMessageIfSismoConnectResponseIsEmpty() public {
    bytes memory responseBytes = hex"";
    // we just expect a revert with an empty responseBytes as far as the decoding will not be successful
    vm.expectRevert();
    sismoConnect.exposed_verify({responseBytes: responseBytes, claim: claimRequest});
  }

  function test_RevertWith_VersionMismatch() public {
    SismoConnectResponse memory invalidSismoConnectResponse = hydraS2Proofs.getSismoConnectResponse1(commitmentMapperRegistry);
    invalidSismoConnectResponse.version = bytes32("fake-version");
    bytes32 expectedVersion = bytes32("sismo-connect-v1");
    vm.expectRevert(
      abi.encodeWithSignature(
        "VersionMismatch(bytes32,bytes32)",
        invalidSismoConnectResponse.version,
        expectedVersion
      )
    );
    sismoConnect.exposed_verify({responseBytes: abi.encode(invalidSismoConnectResponse), claim: claimRequest});
  }

  function test_RevertWith_AppIdMismatch() public {
    SismoConnectResponse memory invalidSismoConnectResponse = hydraS2Proofs.getSismoConnectResponse1(commitmentMapperRegistry);
    invalidSismoConnectResponse.appId = 0x00000000000000000000000000000f00;
    vm.expectRevert(
      abi.encodeWithSignature(
        "AppIdMismatch(bytes16,bytes16)",
        invalidSismoConnectResponse.appId,
        hydraS2Proofs.getSismoConnectResponse1(commitmentMapperRegistry).appId
      )
    );
    sismoConnect.exposed_verify({responseBytes: abi.encode(invalidSismoConnectResponse), claim: claimRequest});
  }

  function test_RevertWith_NamespaceMismatch() public {
    SismoConnectResponse memory invalidSismoConnectResponse = hydraS2Proofs.getSismoConnectResponse1(commitmentMapperRegistry);
    invalidSismoConnectResponse.namespace = bytes16(keccak256("fake-namespace"));
    vm.expectRevert(
      abi.encodeWithSignature(
        "NamespaceMismatch(bytes16,bytes16)",
        invalidSismoConnectResponse.namespace,
        hydraS2Proofs.getSismoConnectResponse1(commitmentMapperRegistry).namespace
      )
    );
    sismoConnect.exposed_verify({responseBytes: abi.encode(invalidSismoConnectResponse), claim: claimRequest});
  }

  function test_RevertWith_SignatureMessageMismatch() public {
    SismoConnectResponse memory invalidSismoConnectResponse = hydraS2Proofs.getSismoConnectResponse1(commitmentMapperRegistry);
    signature = sismoConnect.exposed_buildSignature({message: abi.encode("fake-signature")});
    vm.expectRevert(
      abi.encodeWithSignature(
        "SignatureMessageMismatch(bytes,bytes)",
        signature.message,
        hydraS2Proofs.getSismoConnectResponse1(commitmentMapperRegistry).signedMessage
      )
    );
    sismoConnect.exposed_verify({responseBytes: abi.encode(invalidSismoConnectResponse), claim: claimRequest, signature: signature});
  }

  function test_RevertWith_AuthTypeNotFound() public {
    SismoConnectResponse memory invalidSismoConnectResponse = hydraS2Proofs.getSismoConnectResponse3(commitmentMapperRegistry);
    invalidSismoConnectResponse.proofs[0].auths[0].authType = AuthType.GITHUB;
    vm.expectRevert(
      abi.encodeWithSignature(
        "AuthTypeNotFound(uint8)",
        uint8(authRequest.authType)
      )
    );
    sismoConnect.exposed_verify({responseBytes: abi.encode(invalidSismoConnectResponse), auth: authRequest, signature: signature});
  }

  function test_RevertWith_AuthAnonModeNotFound() public {
    SismoConnectResponse memory invalidSismoConnectResponse = hydraS2Proofs.getSismoConnectResponse3(commitmentMapperRegistry);
    invalidSismoConnectResponse.proofs[0].auths[0].isAnon = true;
    vm.expectRevert(
      abi.encodeWithSignature(
        "AuthIsAnonNotFound(bool)",
        authRequest.isAnon
      )
    );
    sismoConnect.exposed_verify({responseBytes: abi.encode(invalidSismoConnectResponse), auth: authRequest, signature: signature});
  }

  function test_RevertWith_AuthUserIdNotFound() public {
    SismoConnectResponse memory sismoConnectResponse = hydraS2Proofs.getSismoConnectResponse3(commitmentMapperRegistry);
    AuthRequest memory invalidAuthRequest = authRequest;
    invalidAuthRequest.userId = uint256(0xf00);
    // this is needed to force the revert
    // otherwise the contract does not check the userId
    invalidAuthRequest.isSelectableByUser = false; 
    vm.expectRevert(
      abi.encodeWithSignature(
        "AuthUserIdNotFound(uint256)",
        invalidAuthRequest.userId
      )
    );
    sismoConnect.exposed_verify({responseBytes: abi.encode(sismoConnectResponse), auth: invalidAuthRequest, signature: signature});
  }

  function test_RevertWith_ClaimTypeNotFound() public {
    SismoConnectResponse memory invalidSismoConnectResponse = hydraS2Proofs.getSismoConnectResponse1(commitmentMapperRegistry);
    invalidSismoConnectResponse.proofs[0].claims[0].claimType = ClaimType.LTE;
    vm.expectRevert(
      abi.encodeWithSignature(
        "ClaimTypeNotFound(uint8)",
        uint8(claimRequest.claimType)
      )
    );
    sismoConnect.exposed_verify({responseBytes: abi.encode(invalidSismoConnectResponse), claim: claimRequest, signature: signature});
  }

  function test_RevertWith_ClaimGroupIdNotFound() public {
    SismoConnectResponse memory invalidSismoConnectResponse = hydraS2Proofs.getSismoConnectResponse1(commitmentMapperRegistry);
    invalidSismoConnectResponse.proofs[0].claims[0].groupId = 0xf0000000000000000000000000000000;
    vm.expectRevert(
      abi.encodeWithSignature(
        "ClaimGroupIdNotFound(bytes16)",
        claimRequest.groupId
      )
    );
    sismoConnect.exposed_verify({responseBytes: abi.encode(invalidSismoConnectResponse), claim: claimRequest, signature: signature});
  }

  function test_RevertWith_ClaimGroupTimestampNotFound() public {
    SismoConnectResponse memory invalidSismoConnectResponse = hydraS2Proofs.getSismoConnectResponse1(commitmentMapperRegistry);
    invalidSismoConnectResponse.proofs[0].claims[0].groupTimestamp = bytes16("fake-timestamp");
    vm.expectRevert(
      abi.encodeWithSignature(
        "ClaimGroupTimestampNotFound(bytes16)",
        claimRequest.groupTimestamp
      )
    );
    sismoConnect.exposed_verify({responseBytes: abi.encode(invalidSismoConnectResponse), claim: claimRequest, signature: signature});
  }

  // tests that should pass without reverting

  function test_SismoConnectLibWithOnlyClaimAndMessage() public {
    bytes memory responseEncoded = abi.encode(hydraS2Proofs.getSismoConnectResponse1(commitmentMapperRegistry));

    SismoConnectVerifiedResult memory verifiedResult = sismoConnect.exposed_verify({
      responseBytes: responseEncoded,
      request: RequestBuilder.buildRequest({
        claim: sismoConnect.exposed_buildClaim({groupId: 0xe9ed316946d3d98dfcd829a53ec9822e}),
        signature: sismoConnect.exposed_buildSignature({message: abi.encode(user)}),
        appId: appId
      })
    });
  }

  function test_SismoConnectLibWithTwoClaimsAndMessage() public {
    bytes memory responseEncoded = abi.encode(hydraS2Proofs.getSismoConnectResponse2(commitmentMapperRegistry));

    ClaimRequest[] memory claims = new ClaimRequest[](2);
    claims[0] = sismoConnect.exposed_buildClaim({groupId: 0xe9ed316946d3d98dfcd829a53ec9822e});
    claims[1] = sismoConnect.exposed_buildClaim({groupId: 0x02d241fdb9d4330c564ffc0a36af05f6});

    SismoConnectVerifiedResult memory verifiedResult = sismoConnect.exposed_verify({
      responseBytes: responseEncoded,
      request: RequestBuilder.buildRequest({
        claims: claims,
        signature: sismoConnect.exposed_buildSignature({message: abi.encode(user)}),
        appId: appId
      })
    });
  }

  function test_SismoConnectLibWithOnlyOneAuth() public {
    bytes memory responseEncoded = abi.encode(hydraS2Proofs.getSismoConnectResponse3(commitmentMapperRegistry));

    SismoConnectRequest memory request = RequestBuilder.buildRequest({
      auth: sismoConnect.exposed_buildAuth({authType: AuthType.VAULT}),
      signature: signature,
      appId: appId
    });

    SismoConnectVerifiedResult memory verifiedResult = sismoConnect.exposed_verify(
      responseEncoded,
      request
    );
    assertTrue(verifiedResult.auths[0].userId != 0);
  }

  function test_SismoConnectLibWithClaimAndAuth() public {
    bytes memory responseEncoded = abi.encode(hydraS2Proofs.getSismoConnectResponse4(commitmentMapperRegistry));
     SismoConnectRequest memory request = RequestBuilder.buildRequest({
      claim: sismoConnect.exposed_buildClaim({groupId: 0xe9ed316946d3d98dfcd829a53ec9822e}),
      auth: sismoConnect.exposed_buildAuth({authType: AuthType.VAULT}),
      signature: signature,
      appId: appId
    });

    SismoConnectVerifiedResult memory verifiedResult = sismoConnect.exposed_verify(
      responseEncoded,
      request
    );
    assertTrue(verifiedResult.auths[0].userId != 0);
  }

   function test_ClaimAndAuthWithSignedMessageZKDROP() public {
        // address that reverts if not modulo SNARK_FIELD after hashing the signedMessage for the circuit
        // should keep this address for testing purposes
        user = 0x040200040600000201150028570102001e030E26;

        // update EdDSA public key for proof made in dev.beta environment
        uint256[2] memory devBetaCommitmentMapperPubKey = [
          0x2ab71fb864979b71106135acfa84afc1d756cda74f8f258896f896b4864f0256, 
          0x30423b4c502f1cd4179a425723bf1e15c843733af2ecdee9aef6a0451ef2db74
        ];
        commitmentMapperRegistry.updateCommitmentMapperEdDSAPubKey(devBetaCommitmentMapperPubKey);

        bytes memory responseEncoded = hex"000000000000000000000000000000000000000000000000000000000000002011b1de449c6c4adb0b5775b3868b28b300000000000000000000000000000000b8e2054f8a912367e38a22ce773328ff000000000000000000000000000000007369736d6f2d636f6e6e6563742d76310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000040200040600000201150028570102001e030e2600000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000052000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000c068796472612d73322e310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000004c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000e9ed316946d3d98dfcd829a53ec9822e000000000000000000000000000000006c617465737400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002c00c724e1794afb6e84cf423604d7ef0b42ae2fd6005ff4c1c702f2b4eaae78e5c041b87d58106ced21edfbdd3c9e94015aaee3e35fbbd27e329bcd9abc8cfdfaa123536d2ee1492da5d1ff14c0a6cad6df0099c795eff6133627fa09a2d4f1873092099e280139a1f23cd18b45bec7a3a5ba3a1f8af3ed01946382e4d2b16135017d54c77f366a2e6c1a2cf0c30f3d08cd6726918786b832341e2fdde850a40091f17497194179747c1f058a8f0e7ab845b82006ae4fbb61af0364040df3f0ef40117b26fe359221140f10addc656a19b7527c68f3788121480f77cad4b15e7d52809d9bb9326b7908ea603bab87077c81eeac0b928fd68f1ebcedc493e0413d000000000000000000000000000000000000000000000000000000000000000001e762fcc1e79cf55469b1e6ada7c8f80734bc7484f73098f3168be945a2c00842ab71fb864979b71106135acfa84afc1d756cda74f8f258896f896b4864f025630423b4c502f1cd4179a425723bf1e15c843733af2ecdee9aef6a0451ef2db74260a00dba64ffb7337d649f33f9f060a7b485d4a3b9f3964c3419c384fa0352604f81599b826fa9b715033e76e5b2fdda881352a9b61360022e30ee33ddccad90744e9b92802056c722ac4b31612e1b1de544d5b99481386b162a0b59862e0850000000000000000000000000000000000000000000000000000000000000001285bf79dc20d58e71b9712cb38c420b9cb91d3438c8e3dbaf07829b03ffffffc0000000000000000000000000000000000000000000000000000000000000000174c0f7d68550e40962c4ae6db9b04940288cb4aeede625dd8a9b0964939cdeb0000000000000000000000000000000011b1de449c6c4adb0b5775b3868b28b300000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001a068796472612d73322e310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000004a000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001174c0f7d68550e40962c4ae6db9b04940288cb4aeede625dd8a9b0964939cdeb00000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002c00409a918ad2376838497c90fc5e5ee72a382c515ffb62b6618c94bb337875761117152c0edbd9240e4a3531a88c97c57c0257fbb6c6b3b173a3670a18d7d3f881bba6d1c972cad3f1eae3bf4c9dbf899a9105965697d4c95c62efccccc16ba490c7c4424cb1e07c59374da5ff2c2754e049d051ef818cc27e54936b11e4dab6d0265d8887de3c3c119a40d5de1f1956f4fecd4d803784074882308aa01ba38740bb7c10f5e01c4fef92c2d815cf68aa20b35a51e2de93a8c466d01b7fe8a747b13c4c440ef168a8dad9173a3e2deb5e6da237f2850598c0be741c5668747972e04ee0d9d3c251180091eeb9ec8c0f1f1a9b512c0a531f216f2b081b30200dfe000000000000000000000000000000000000000000000000000000000000000001e762fcc1e79cf55469b1e6ada7c8f80734bc7484f73098f3168be945a2c00842ab71fb864979b71106135acfa84afc1d756cda74f8f258896f896b4864f025630423b4c502f1cd4179a425723bf1e15c843733af2ecdee9aef6a0451ef2db74000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000174c0f7d68550e40962c4ae6db9b04940288cb4aeede625dd8a9b0964939cdeb0000000000000000000000000000000011b1de449c6c4adb0b5775b3868b28b3000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
        zkdrop.claimWithSismoConnect(responseEncoded, user);
    }


  function test_TwoClaimsOneVaultAuthWithSignature() public {
    // update EdDSA public key for proof made in dev.beta environment
    uint256[2] memory devBetaCommitmentMapperPubKey = [
      0x2ab71fb864979b71106135acfa84afc1d756cda74f8f258896f896b4864f0256, 
      0x30423b4c502f1cd4179a425723bf1e15c843733af2ecdee9aef6a0451ef2db74
    ];
    commitmentMapperRegistry.updateCommitmentMapperEdDSAPubKey(devBetaCommitmentMapperPubKey);

    user = 0x7def1d6D28D6bDa49E69fa89aD75d160BEcBa3AE;

    ClaimRequest[] memory claims = new ClaimRequest[](2);
    claims[0] = RequestBuilder.buildClaim({groupId: 0xe9ed316946d3d98dfcd829a53ec9822e});
    claims[1] = RequestBuilder.buildClaim({groupId: 0x02d241fdb9d4330c564ffc0a36af05f6});

    AuthRequest[] memory auths = new AuthRequest[](1);
    auths[0] = RequestBuilder.buildAuth({authType: AuthType.VAULT});

    SismoConnectRequest memory request = RequestBuilder.buildRequest({
      claims: claims,
      auths: auths,
      signature: signature,
      appId: appId
    });

    bytes memory responseEncoded = hex"";
    

    SismoConnectVerifiedResult memory verifiedResult = sismoConnect.exposed_verify({
      responseBytes: responseEncoded,
      request: request
    });
    console.log("Claims in Verified result: %s", verifiedResult.claims.length);
  }

  // function test_SismoConnectLibTwoDataRequests() public {
  //     ClaimRequest memory claimRequest = ClaimRequestLib.build({
  //         groupId: 0xe9ed316946d3d98dfcd829a53ec9822e,
  //         groupTimestamp: bytes16("latest"),
  //         value: 2,
  //         claimType: ClaimType.EQ
  //     });

  //     AuthRequest memory authRequest = AuthRequestLib.build({authType: AuthType.EVM_ACCOUNT, isAnon: true});

  //     ClaimRequest memory claimRequestTwo =
  //         ClaimRequestLib.build({groupId: 0xe9ed316946d3d98dfcd829a53ec9822e, value: 1, claimType: ClaimType.GTE});

  //     AuthRequest memory authRequestTwo = AuthRequestLib.build({authType: AuthType.VAULT});

  //     DataRequest[] memory dataRequests = new DataRequest[](2);
  //     dataRequests[0] = DataRequestLib.build({claim: claimRequest, auth: authRequest});
  //     dataRequests[1] = DataRequestLib.build({claim: claimRequestTwo, auth: authRequestTwo});

  //     requestContent = SismoConnectRequestContentLib.build({dataRequests: dataRequests});

  //     bytes memory zkResponseEncoded = abi.encode(hydraS2Proofs.getSismoConnectResponse1(commitmentMapperRegistry));

  //     SismoConnectVerifiedResult memory verifiedResult =
  //         sismoConnect.verify(zkResponseEncoded, requestContent);
  //     console.log("userId: %s", verifiedResult.auths[0].userId);
  // }
}
